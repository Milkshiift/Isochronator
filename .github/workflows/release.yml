name: Release and Publish

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BINARY_NAME: isochronator

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
            # Cross compiled builds can't be PGOd

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            pgo: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            pgo: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            pgo: false

          - os: macos-15
            target: x86_64-apple-darwin
            pgo: false
          - os: macos-15
            target: aarch64-apple-darwin
            pgo: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            pgo: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Dependencies for winit/cpal (glibc)
          sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxi-dev libasound2-dev
          # Linker for aarch64 cross-compile
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Set up cross-compilation linker (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          target: ${{ matrix.target }}
          override: true
          cache: true

      - name: Build with PGO (for native targets)
        if: matrix.pgo
        run: |
          cargo install cargo-pgo
          cargo pgo build -- --target ${{ matrix.target }} --bin ${{ env.BINARY_NAME }}
          cargo pgo run -- --target ${{ matrix.target }} -- --headless-profile
          cargo pgo optimize -- --target ${{ matrix.target }}

      - name: Build with standard release (for cross-compiled targets)
        if: '!matrix.pgo'
        run: cargo build --release --target ${{ matrix.target }} --bin ${{ env.BINARY_NAME }}

      - name: List build artifacts
        run: |
          echo "Listing contents of target/${{ matrix.target }}/release directory..."
          ls -R target/${{ matrix.target }}/release
        shell: bash

      - name: Prepare binary for upload
        id: prep_binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv ${{ env.BINARY_NAME }}.exe ../../../${{ env.BINARY_NAME }}-${{ matrix.target }}.exe
            echo "BIN_PATH=${{ env.BINARY_NAME }}-${{ matrix.target }}.exe" >> $GITHUB_OUTPUT
          else
            mv ${{ env.BINARY_NAME }} ../../../${{ env.BINARY_NAME }}-${{ matrix.target }}
            echo "BIN_PATH=${{ env.BINARY_NAME }}-${{ matrix.target }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binary-${{ matrix.target }}
          path: ${{ steps.prep_binary.outputs.BIN_PATH }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets/
          pattern: app-binary-*
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "Downloaded files for release:"
          ls -R release-assets/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Test Build from {0}', github.ref_name) }}
          draft: true
          generate_release_notes: true
          files: release-assets/*