name: Release and Publish

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BINARY_NAME: isochronator

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Linux dependencies (for winit and cpal)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxi-dev libasound2-dev

      - name: Install Rust toolchain with PGO support
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          override: true
          cache: true

      - name: Install cargo-pgo
        run: cargo install cargo-pgo

      - name: Build instrumented binary
        run: cargo pgo build -- --bin ${{ env.BINARY_NAME }}

      - name: Gather PGO profiles
        run: cargo pgo run -- -- --headless-profile

      - name: Build PGO-optimized binary
        run: cargo pgo optimize

      - name: List build artifacts
        run: |
          ls -R target/release
        shell: bash

      - name: Package binary for release (Linux)
        if: runner.os == 'Linux'
        run: |
          tar \
          czvf ${{ env.BINARY_NAME }}-${{ runner.os }}.tar.gz \
          -C target/release \
            ${{ env.BINARY_NAME }}

      - name: Package binary for release (macOS)
        if: runner.os == 'macOS'
        run: |
          cd target/release
          zip -r ../../${{ env.BINARY_NAME }}-${{ runner.os }}.zip ./${{ env.BINARY_NAME }}.app
          cd ../..

      - name: Package binary for release (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target/release
          7z a ..\..\${{ env.BINARY_NAME }}-${{ runner.os }}.zip ${{ env.BINARY_NAME }}.exe
          cd ../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binaries-${{ runner.os }}
          path: ${{ env.BINARY_NAME }}-${{ runner.os }}.*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets/

      - name: List downloaded files
        run: ls -R release-assets/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Test Build from {0}', github.ref_name) }}
          draft: true
          generate_release_notes: true
          files: release-assets/**/*.tar.gz, release-assets/**/*.zip