name: Release and Publish

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BINARY_NAME: isochronator

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.target || 'default' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-15, windows-2025]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Linux dependencies (for winit and cpal)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxi-dev libasound2-dev

      - name: Install Rust toolchain with PGO support
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          override: true
          cache: true

      - name: Get Target Triple
        id: get_target
        run: |
          TARGET_TRIPLE=${{ matrix.target || '$(rustc -vV | sed -n "s/host: //p")' }}
          echo "TARGET_TRIPLE=${TARGET_TRIPLE}" >> $GITHUB_ENV
        shell: bash

      - name: Create Platform Identifier
        id: platform
        shell: bash
        run: |
          ARCH=$(echo "${{ env.TARGET_TRIPLE }}" | cut -d'-' -f1)
          
          OS_NAME=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          
          PLATFORM_ID="${ARCH}-${OS_NAME}"
          echo "PLATFORM_ID=${PLATFORM_ID}" >> $GITHUB_ENV
          
          echo "Binary will be named for platform: ${PLATFORM_ID}"

      - name: Install cargo-pgo
        run: cargo install cargo-pgo

      - name: Build instrumented binary
        run: cargo pgo build --target ${{ env.TARGET_TRIPLE }} -- --bin ${{ env.BINARY_NAME }}

      - name: Gather PGO profiles
        run: cargo pgo run --target ${{ env.TARGET_TRIPLE }} -- -- --headless-profile

      - name: Build PGO-optimized binary
        run: cargo pgo optimize --target ${{ env.TARGET_TRIPLE }}

      - name: Prepare Release Assets
        shell: bash
        run: |
          # Create a directory to stage our release assets
          mkdir release_assets

          # Determine file extensions
          EXE_SUFFIX=""
          ARCHIVE_SUFFIX=".tar.gz"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXE_SUFFIX=".exe"
            ARCHIVE_SUFFIX=".zip"
          fi

          # Define asset names using the new PLATFORM_ID
          BINARY_FILENAME="${{ env.BINARY_NAME }}-${{ env.PLATFORM_ID }}${EXE_SUFFIX}"
          ARCHIVE_FILENAME="${{ env.BINARY_NAME }}-${{ env.PLATFORM_ID }}${ARCHIVE_SUFFIX}"
          
          # Define source and destination paths
          BIN_SRC_PATH="target/${{ env.TARGET_TRIPLE }}/release/${{ env.BINARY_NAME }}${EXE_SUFFIX}"
          BIN_DEST_PATH="release_assets/${BINARY_FILENAME}"
          
          echo "Copying binary from ${BIN_SRC_PATH} to ${BIN_DEST_PATH}"
          cp "${BIN_SRC_PATH}" "${BIN_DEST_PATH}"

          # Package the binary into an archive
          echo "Creating archive: ${ARCHIVE_FILENAME}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a "release_assets/${ARCHIVE_FILENAME}" "${BIN_DEST_PATH}"
          else
            tar -czvf "release_assets/${ARCHIVE_FILENAME}" -C "release_assets" "${BINARY_FILENAME}"
          fi
          
          echo "Listing prepared release assets:"
          ls -R release_assets

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binaries-${{ env.PLATFORM_ID }}
          path: release_assets/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets/

      - name: List downloaded files
        run: ls -R release-assets/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Build from {0}', github.ref_name) }}
          draft: true
          generate_release_notes: true
          files: release-assets/**/*